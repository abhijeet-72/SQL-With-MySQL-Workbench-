-- -------------------------------
## Exercise File
-- -------------------------------
-- Total Payments from each customer after a certain date

SELECT
customerNumber,
SUM(amount)
FROM payments
JOIN customers USING (customerNumber)
GROUP BY customerNumber;

-- Show the employee names in ascending order, who were working from more than 10 months in company & having salary more than $2000 per month (Use Employee table)

/* 
    employee ID  : int
    name         : varchar (25)
    months       : int
    salary       : int
    
    month represents employee working in organization in months
    salary represents per month salary drawn by employee
*/

SELECT name FROM Employee
WHERE months > 10 AND salary > 2000
ORDER BY name;

-- Provide the total credit limit of customer from customers table for sales representtive number 1164
/*
    customerNumber : int
    firstName : varchar (25)
    lastName : varchar (25)
    postalCode : int
    salesRepNum : int
    creditLimit : float
*/

SELECT SUM(creditLimit) FROM customers WHERE salesRepNum = 1164;


-- Provide the sum of all city polpulations for California district using City table
/*
    City : varchar (25)
    Country : varchar (25)
    District : varchar (25)
    Population : int
    Code : int
*/

SELECT SUM(Population) FROM City WHERE District = 'California';

-- Provide the sum of total population of cities, ONLY from Asia Continent 
-- CITY & COUNTRY table provided (COUNTRYCODE from CITY table & CODE from COUNTRY table are matching columns) :

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
    
            COUNTRY
    CODE        : varchar (25)
    NAME        : varchar (25)
    CONTINENT   : varchar (25)
    AREA        : int
    INDEPYEAR   : int
*/

SELECT SUM(Ct.POPULATION)
FROM CITY Ct
JOIN COUNTRY Cn
ON Ct.COUNTRYCODE = Cn.CODE
WHERE CONTINENT = 'Asia';

-- Query the name of all cities, ONLY from Africa Continent 
-- CITY & COUNTRY table provided (COUNTRYCODE from CITY table & CODE from COUNTRY table are matching columns) :

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
    
            COUNTRY
    CODE        : varchar (25)
    NAME        : varchar (25)
    CONTINENT   : varchar (25)
    AREA        : int
    INDEPYEAR   : int
*/

SELECT Ct.Name
FROM CITY Ct
JOIN COUNTRY Cn
ON Ct.COUNTRYCODE = Cn.CODE
WHERE CONTINENT = 'Africa';

-- Query the count of cities from CITY table for population more than 100000.

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
*/

SELECT COUNT(*) FROM CITY WHERE POPULATION > 100000;

-- Query the Average population of all cities within California Distict.

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
*/

SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT = 'California';

-- Query the maximum & minimum population of cities. 

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
*/

SELECT (MAX(POPULATION) - MIN(POPULATION)) AS diffPop FROM CITY;

-- Query the average population for all cities in CITY, rounded down to the nearest integer.

/*
            CITY
    ID          : int
    NAME        : varchar (25)
    COUNTRYCODE : varchar (25)
    DISTRICT    : varchar (25)
    POPULATION  : int
*/

SELECT ROUND(AVG(POPULATION)) FROM CITY;

-- Query the sum of Northern Latitudes in STATION table, lattitude value must be greater than 40.2546 and less than 120.1245. 
-- Truncate the answer to 2 decimal places. (LAT_N : Northern Lattitude & LONG_W : Western Longitude)

/*
            STATION
    ID          : int
    CITY        : varchar (25)
    STATE       : varchar (25)
    LAT_N       : float
    LONG_W      : float
*/

SELECT ROUND((SUM(LAT_N)),4) FROM STATION WHERE LAT_IN BETWEEN 40.2546 AND 120.1245;

Find the difference between the total number of CITY entries & the number of distinct CITY entries in the table STATION.

/*
            STATION
    ID          : int
    CITY        : varchar (25)
    STATE       : varchar (25)
    LAT_N       : float
    LONG_W      : float
*/

SELECT ( COUNT (*) - ( COUNT ( DISTINCT CITY ) ) ) FROM STATION;

-- Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4  decimal places.

/*
            STATION
    ID          : int
    CITY        : varchar (25)
    STATE       : varchar (25)
    LAT_N       : float
    LONG_W      : float
*/


SELECT ROUND((MIN(LONG_W)),4) FROM STATION WHERE LAT_N > 38.7780;
